# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when a release is created
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of `ECR_REPOSITORY` in the workflow below with your repository's name.
#    Replace the value of `aws-region` in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the values for `service` and `cluster` in the workflow below with your service and cluster names.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of `task-definition` in the workflow below with your JSON file's name.
#    Replace the value of `container-name` in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

on:
  workflow_dispatch:
    inputs:
      repository_name:
        description: 'The name to use for the repository'     
        required: true
        default: 'demo'

name: Deploy infrastructure on AWS

jobs:
  deploy-infrastructure:
    name: Deploy infrastructure
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2
  
    - name: Configure AWS credentials
      id: creds
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Create images repository with CloudFormation
      id: ecr-repository-stack
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      with:
        name: github-actions-stack01-${{ github.event.inputs.repository_name }}
        template: .aws/cloudformation-templates/ecr_repository_cf.yaml
        role-arn: arn:aws:iam::${{ steps.creds.outputs.aws-account-id }}:role/github-actions-cloudformation-stack-role
        no-fail-on-empty-changeset: "1"
          
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: github-actions-stack01-${{ github.event.inputs.repository_name }}-repository
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Retrieve default VPC ID and public subnets
      id: vpc
      run: |
        VPC_ID=`aws ec2 describe-vpcs --filters "Name=isDefault, Values=true" --query 'Vpcs[].VpcId' --output text`
        echo "::set-output name=vpc-id::$VPC_ID"
        SUBNET_1=`aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" "Name=default-for-az,Values=true" --query 'Subnets[0].SubnetId' --output text`
        echo "::set-output name=subnet-one::$SUBNET_1"
        SUBNET_2=`aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" "Name=default-for-az,Values=true" --query 'Subnets[1].SubnetId' --output text`
        echo "::set-output name=subnet-two::$SUBNET_2"

    - name: Create cluster in AWS with CloudFormation
      id: ecs-cluster-stack
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      with:
        name: github-actions-stack02-${{ github.event.inputs.repository_name }}
        template: .aws/cloudformation-templates/cluster_cf.yaml
        role-arn: arn:aws:iam::${{ steps.creds.outputs.aws-account-id }}:role/github-actions-cloudformation-stack-role
        no-fail-on-empty-changeset: "1"
        capabilities: "CAPABILITY_NAMED_IAM"
        parameter-overrides: >-
          ImageName=${{ steps.build-image.outputs.image }},
          KeyName=github-actions-kp,
          VpcId=${{ steps.vpc.outputs.vpc-id }},
          PublicSubnetOne=${{ steps.vpc.outputs.subnet-one }},
          PublicSubnetTwo=${{ steps.vpc.outputs.subnet-two }}
